#!/usr/bin/perl -w
# PPath
# Surya Saha    07/18/2013  
# reading reports generated by LipoP (http://www.cbs.dtu.dk/services/LipoP/) 
# for any refseq formatted proteins set with GI numbers  
# Writing a Excel file for predicted Lipoprotein signal peptides with GI/Acc no or Name
# Writing a gff file for Gbrowse 


unless (@ARGV == 4){
	print "USAGE: $0 <LipoP short output> <GFF> <Index GFF on GI or Name> <Source genome>\n";
	print "GI should be used for original RefSeq GFF files\n";
	print "Name should be used for RefSeq-like GFF and Fasta files created manually from Artemis and fastaArtemis2RefSeq.pl\n";
	exit;
}

use strict;
use warnings;

my ($src,$rec,@preds,%gff,%gffvals,$i,$j,$k,$l,$ctr,@temp,@temp1,$spictr,$spiictr,$tmhctr);

unless(open(OUTXLS,">$ARGV[0].xls")){print "not able to open $ARGV[0].xls\n\n";exit;}
unless(open(OUTGFF,">$ARGV[0].gff")){print "not able to open $ARGV[0].gff\n\n";exit;}
unless(open(LPREP,$ARGV[0])){print "not able to open $ARGV[0]\n\n";exit;}
chomp $ARGV[1];
unless(open(INGFF,$ARGV[1])){print "not able to open $ARGV[1]\n\n";exit;}

## LipoP  predictions
 # gi_LamPW_SP1_ref_LamPW_SP1_ CYT score=-0.200913
# gi_LamPW_SP2_ref_LamPW_SP2_ CYT score=-0.200913
# gi_LamPW_SP3_ref_LamPW_SP3_ TMH score=0.171026 margin=0.371939
# gi_254780170_ref_YP_003064583.1_ SpI score=9.25687 margin=9.457783 cleavage=24-25
$spictr=$spiictr=$tmhctr=$ctr=0;
while ($rec=<LPREP>){
	if ($rec=~ /\# /){
		$rec=~ s/\s*\# //;# # gi_La to gi_La
		@temp = split(' ',$rec);
		#only record non CYT predictions
		if ($temp[1] ne 'CYT'){
			# gi_254780133_ref_YP_003064546.1_
			# gi_LamPW_SP5_ref_LamPW_SP5_ CYT score=-0.200913
			@temp1 = split('_ref_',$temp[0]);
			if ($ARGV[2] eq 'GI'){
				$temp1[0] =~ s/^gi_//;
				$preds[$ctr][0]=$temp1[0];#GI
			}
			elsif ($ARGV[2] eq 'Name'){
				$temp1[1] =~ s/_$//;
				$preds[$ctr][0]=$temp1[1];#Name or Acc
			}
			
			$preds[$ctr][1]=$temp[1];#class
			if ($temp[1] eq 'SpI'){# regular signal peptide
				$spictr++;
				for (2..4){	$preds[$ctr][$_]=$temp[$_];}
			}
			elsif ($temp[1] eq 'SpII'){# lipoprotein signal peptide
				$spiictr++;
				for (2..5){ $preds[$ctr][$_]=$temp[$_];}
			}
			elsif ($temp[1] eq 'TMH'){#n-term transmembrane helix
				$tmhctr++;
				$preds[$ctr][2]=$temp[2];#score
				$preds[$ctr][3]=$temp[3];#margin
			}
			$ctr++;
		}
		@temp=(); @temp1=();
	}
}
close(LPREP);

# Reading in the GFF file
#NC_012985.2	RefSeq	gene	36	407	.	+	.	locus_tag=CLIBASIA_00005;db_xref=GeneID:8210255
#NC_012985.2	RefSeq	CDS	36	404	.	+	0	
#locus_tag=CLIBASIA_00005;transl_table=11;product=hypothetical protein;protein_id=YP_003064535.1;db_xref=GI:254780122;db_xref=GeneID:8210255;exon_number=1
#NC_012985.2	RefSeq	start_codon	36	38	.	+	0	locus_tag=CLIBASIA_00005;transl_table=11;product=hypothetical protein;protein_id=YP_003064535.1;db_xref=GI:254780122;db_xref=GeneID:8210255;exon_number=1
#NC_012985.2	RefSeq	stop_codon	405	407	.	+	0	locus_tag=CLIBASIA_00005;transl_table=11;product=hypothetical protein;protein_id=YP_003064535.1;db_xref=GI:254780122;db_xref=GeneID:8210255;exon_number=1
#NC_012985.2	RefSeq	gene	497	820	.	+	.	locus_tag=CLIBASIA_00010;db_xref=GeneID:8209098
#NC_012985.2	RefSeq	CDS	497	817	.	+	0	
#locus_tag=CLIBASIA_00010;transl_table=11;product=hypothetical protein;protein_id=YP_003064536.1;db_xref=GI:254780123;db_xref=GeneID:8209098;exon_number=1
#ID=cds0;Name=YP_007232248.1;Parent=gene0;Dbxref=Genbank:YP_007232248.1,GeneID:14293230;gbkey=CDS;product=GTPase and tRNA-U34 5-formylation enzyme TrmE;protein_id=YP_007232248.1;transl_table=11
#Name=LamPW_SP1;product=Isoleucyl-tRNA
$ctr=0;
while ($rec=<INGFF>){
	if ($rec=~ /^\#/){next;}
	
	@temp = split("\t",$rec);
	if($ctr==0){$src=$temp[0];}
	chomp $temp[8];
	
	if ($temp[2] eq 'CDS'){
		@temp1=split(';',$temp[8]);
		if ($ARGV[2] eq 'GI'){
			foreach $i (@temp1){
				if($i =~ /^db_xref\=GI/){
					$i =~ s/^db_xref\=GI\://;
					$gff{$i}=[@temp];
					last;
				}
			}
		}
		elsif ($ARGV[2] eq 'Name'){
			@temp1=split(';',$temp[8]);
			foreach $i (@temp1){
				if($i =~ /^Name\=/){
					$i =~ s/^Name\=//;
					$gff{$i}=[@temp];
					last;
				}
			}			
		}
	}
	@temp=();
}
close(INGFF);

# Printing the XLS file
print OUTXLS "Sig peps\tLipoprotein sig peps\tn-terminal tran. helix\n";
print OUTXLS "$spictr\t$spiictr\t$tmhctr\n\n\n";

if ($ARGV[2] eq 'GI'){
	print OUTXLS "Product\tGI\tAcc\tSpI\tSpII\tTMH\n";
}
elsif ($ARGV[2] eq 'Name'){
	print OUTXLS "Product\tName\tSpI\tSpII\tTMH\n";
}
	
foreach $i (@preds){
	if(!(exists $gff{$i->[0]})){ print STDERR "No GFF entry found on @$i\n"; exit;}# if the protein does not exist in GFF file
	$j=$gff{$i->[0]};
	@temp=split(';',@$j[8]);
	# split key=value pairs and store in hash
	foreach $l (@temp){
		@temp1=split('=',$l);
		$gffvals{$temp1[0]}=$temp1[1];
	}
	
	if ($ARGV[2] eq 'GI'){
		# fix acc num
		$gffvals{'protein_id'}=~ s/.1$//;
		print OUTXLS "$gffvals{'product'}\t",$i->[0],"\t$gffvals{'protein_id'}\t";
	}
	elsif ($ARGV[2] eq 'Name'){
		print OUTXLS "$gffvals{'product'}\t$gffvals{'Name'}\t";
	}

	if ($i->[1] eq 'SpI') {print OUTXLS "Y\tN\tN\n";}
	elsif ($i->[1] eq 'SpII') {
		print OUTXLS "N\tY\tN\n";
		#print out lipoprotein predictions coordinates in GFF file for gbrowse
		print OUTGFF "$src\tLipoP\tmat_peptide\t";
		my ($mpstr,$mpend,$site);
		$site=$i->[4];
		$site=~ s/^cleavage\=//;
		$site=~ s/\-\d+$//;
		#if + strand
		if (@$j[6] eq '+'){
			$mpend=@$j[4];
			$mpstr=@$j[3]+($site*3)-1;
			if ($ARGV[2] eq 'GI'){
				print OUTGFF "$mpstr\t$mpend\t.\t+\t.\tName=",$i->[0],"\(LipoP\)\;Note=lipoprotein\;\n";
			}
			elsif ($ARGV[2] eq 'Name'){
				print OUTGFF "$mpstr\t$mpend\t.\t+\t.\tName=$gffvals{'Name'}\(LipoP\)\;Note=lipoprotein\;\n";
			}
		}
		# if - strand
		elsif (@$j[6] eq '-'){
			$mpstr=@$j[3];
			$mpend=@$j[4]-($site*3)+1;
			if ($ARGV[2] eq 'GI'){
				print OUTGFF "$mpstr\t$mpend\t.\t-\t.\tName=",$i->[0],"\(LipoP\)\;Note=lipoprotein\;\n";
			}
			elsif ($ARGV[2] eq 'Name'){
				print OUTGFF "$mpstr\t$mpend\t.\t-\t.\tName=$gffvals{'Name'}\(LipoP\)\;Note=lipoprotein\;\n";
			}			
		}		
	}
	elsif ($i->[1] eq 'TMH') {print OUTXLS "N\tN\tY\n";}
	@temp=();
	%gffvals=();
}
close(OUTGFF);
close(OUTXLS);

exit;